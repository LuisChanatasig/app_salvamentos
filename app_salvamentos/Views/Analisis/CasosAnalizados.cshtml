@model IEnumerable<app_salvamentos.Models.CasoListadoDto>
@{
    ViewBag.Title = "Listado de Casos";
    ViewBag.pTitle = "Listado de casos"; // Título de la página en Velzon
    ViewBag.pageTitle = "Listado de casos"; // Título de la sección en Velzon
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.0/dist/sweetalert2.min.css" rel="stylesheet">
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header border-0">
                <h4 class="card-title mb-0">📋 Bandeja de Casos</h4>
                <div class="d-flex justify-content-end gap-2 mt-2">
                    <a href="@Url.Action("CrearCasos", "Casos", new { area = "" })" class="btn btn-success">
                        <i class="ri-add-line align-bottom me-1"></i> Crear Caso
                    </a>
                    <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#modalCasos">
                        <i class="bx bx-folder align-bottom me-1"></i> Empezar Nuevo Análisis
                    </button>
                </div>
            </div><div class="card-body">
                <div class="table-responsive">
                    <table id="alternative-pagination"
                           class="table nowrap dt-responsive align-middle table-hover table-bordered w-100">
                        <thead class="table-light">
                            <tr>
                                <th data-priority="1">ID</th>
                                <th data-priority="2">Fecha creación</th>
                                <th data-priority="3">Asegurado</th>
                                <th>Placa</th>
                                <th>Marca</th>
                                <th>Modelo</th>
                                <th>Estado</th>
                                <th data-priority="1">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.Any())
                            {
                                @foreach (var caso in Model)
                                {
                                    <tr>
                                        <td>@caso.caso_id</td>
                                        <td>@caso.created_at.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@caso.nombre_asegurado</td>
                                        <td>@caso.placa</td>
                                        <td>@caso.marca</td>
                                        <td>@caso.modelo</td>
                                        <td>
                                            @{
                                                string badgeClass = "bg-secondary"; // Default
                                                switch (caso.estado_caso.ToUpper())
                                                {
                                                    case "CREADO":
                                                        badgeClass = "bg-warning";
                                                        break;
                                                    case "ANALIZADO":
                                                        badgeClass = "bg-info";
                                                        break;
                                                    case "FINALIZADO":
                                                        badgeClass = "bg-success";
                                                        break;
                                                        // Añade más casos si tienes otros estados
                                                }
                                            }
                                            <span class="badge @badgeClass">@caso.estado_caso.ToUpper()</span>
                                        </td>
                                        <td class="text-center">
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-soft-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                    Acciones
                                                </button>
                                                <ul class="dropdown-menu" style="">
                                                    <li hidden>
                                                        <a href="javascript:void(0);"
                                                           class="dropdown-item btn-enviar-avaluo"
                                                           data-caso-id="@caso.caso_id"
                                                           data-numero-reclamo="@caso.numero_reclamo">
                                                            @* Añade data-atributos para JS *@
                                                            <i class="ri-mail-send-line align-bottom me-1"></i> Enviar Avalúo
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a href="@Url.Action("AnálisisCaso", "Analisis", new { id = caso.caso_id })" class="dropdown-item">
                                                            <i class="ri-eye-line align-bottom me-1"></i> Ver Análisis
                                                        </a>
                                                    </li>
                                                    @if (caso.estado_caso.ToUpper() != "FINALIZADO")
                                                    {
                                                        <li>
                                                            <a href="@Url.Action("AnálisisCaso", "Analisis", new { id = caso.caso_id })" class="dropdown-item">
                                                                <i class="ri-edit-line align-bottom me-1"></i> Editar Avalúo
                                                            </a>
                                                        </li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li>
                                                            <a href="#" class="dropdown-item text-danger" onclick="confirmFinalizarCaso(@caso.caso_id, '@caso.numero_avaluo')">
                                                                <i class="ri-check-double-line align-bottom me-1"></i> Finalizar Caso
                                                            </a>
                                                        </li>
                                                    }
                                                    else if (caso.estado_caso.ToUpper() == "ANALIZADO")
                                                    {
                                                        <li>
                                                            <a href="@Url.Action("GenerarReporte", "Casos", new { id = caso.caso_id })" class="dropdown-item text-success">
                                                                <i class="ri-file-text-line align-bottom me-1"></i> Generar Reporte
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center">No se encontraron casos.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
            integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.print.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.0/dist/sweetalert2.all.min.js"></script>

    <script>
        $(function () {
            // Inicialización de DataTable
            $('#alternative-pagination').DataTable({
                responsive: {
                    details: {
                        type: 'column',
                        target: 'tr'
                    }
                },
                pagingType: 'simple_numbers',
                pageLength: 10,
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/es-ES.json'
                },
                dom: 'Bfrtip',
                buttons: [
                    { extend: 'copyHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'excelHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'pdfHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'print', className: 'btn btn-light btn-sm' }
                ],
                // Ajuste para el estilo de fila
                createdRow: function (row, data, dataIndex) {
                    // 'data' aquí debería ser el objeto CasoListadoDto de la fila
                    var estado = data.estado_caso ? data.estado_caso.toUpperCase() : ''; // Asegurarse de que exista
                    $(row).removeClass('table-warning table-info table-success'); // Limpiar clases anteriores

                    switch (estado) {
                        case 'CREADO':
                            $(row).addClass('table-warning');
                            break;
                        case 'ANALIZADO':
                            $(row).addClass('table-info');
                            break;
                        case 'FINALIZADO':
                            $(row).addClass('table-success');
                            break;
                        // Añade más casos si tienes otros estados
                    }
                }
            });
        });
    </script>
    <script>
        // Script para mostrar SweetAlert (si se usa TempData desde el controlador)
        var errorMessage = '@Html.Raw(TempData["ErrorMessage"])';
        var successMessage = '@Html.Raw(TempData["SuccessMessage"])';

        if (errorMessage) {
            Swal.fire({
                icon: 'error',
                title: '¡Error!',
                text: errorMessage,
                confirmButtonText: 'Aceptar'
            });
        } else if (successMessage) {
            Swal.fire({
                icon: 'success',
                title: '¡Éxito!',
                text: successMessage,
                confirmButtonText: 'Ok'
            });
        }
    </script>
    <script>
        // Lógica para cargar el contenido del modal de casos
        const modalCasos = document.getElementById('modalCasos');
        modalCasos.addEventListener('show.bs.modal', function () {
            document.getElementById('contenidoCasosModal').innerHTML =
                '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando casos...</p></div>'; // Mostrar spinner
            fetch('@Url.Action("CasosRegistradosModal", "Casos")')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    document.getElementById('contenidoCasosModal').innerHTML = html;
                })
                .catch(error => {
                    console.error('Error al cargar los casos del modal:', error);
                    document.getElementById('contenidoCasosModal').innerHTML =
                        '<div class="alert alert-danger">Error al cargar los casos: ' + error.message + '</div>';
                });
        });

        // Función para confirmar la finalización del caso
        function confirmFinalizarCaso(casoId, numeroAvaluo) {
            Swal.fire({
                title: `¿Estás seguro de finalizar el caso ${numeroAvaluo}?`,
                text: "Esta acción marcará el caso como finalizado y no se podrá editar.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, finalizar!',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Si el usuario confirma, hacer una llamada AJAX para finalizar el caso
                    fetch('@Url.Action("FinalizarCaso", "Casos")', { // Asegúrate de tener esta acción en tu controlador
                        method: 'POST', // O PUT, dependiendo de tu API
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Si usas Antiforgery
                        },
                        body: JSON.stringify({ id: casoId }) // Enviar el ID del caso
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => { throw new Error(errorData.error || 'Error al finalizar el caso.'); });
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire(
                            'Finalizado!',
                            data.mensaje || 'El caso ha sido finalizado correctamente.',
                            'success'
                        ).then(() => {
                            location.reload(); // Recargar la página para ver los cambios
                        });
                    })
                    .catch(error => {
                        console.error('Error al finalizar el caso:', error);
                        Swal.fire(
                            'Error!',
                            error.message,
                            'error'
                        );
                    });
                }
            });
        }
    </script>

    <script>
        //     // Asumiendo que tu controlador se llama 'AnalisisController' y la acción 'PrepararEmailAvaluo'
        //     // y que tu ruta es del tipo /Analisis/PrepararEmailAvaluo/{id}
         const baseUrlPrepararCorreoAvaluo = '@Url.Action("PrepararEmailAvaluo", "Analisis")';
    </script>
    <script>
                // Este script asume que SweetAlert2 y jQuery están cargados en tu página.
        // Asegúrate de que las variables 'initialUsuarioId' y 'crearCasoUrl' (si se usan en otras partes)
        // estén inyectadas desde tu vista Razor si son necesarias globalmente.

        document.addEventListener('DOMContentLoaded', function() {
            // Genera la URL base para la acción de preparación de correo (GET request)
            // Asegúrate de que tu ruta en el controlador sea algo como /api/Casos/preparar-email-avaluo/{casoId}
            // y que el controlador herede de ControllerBase y tenga [Route("api/[controller]")]
            // La URL debe ser construida directamente en JavaScript o inyectada desde Razor si usas un sistema de ruteo complejo.
            // Para este ejemplo, asumimos una ruta RESTful estándar.
         

            const enviarAvaluoButtons = document.querySelectorAll('.btn-enviar-avaluo');

            enviarAvaluoButtons.forEach(button => {
                button.addEventListener('click', async function(event) {
                    event.preventDefault();

                    const casoId = this.dataset.casoId;

                    if (!casoId) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'ID de caso no encontrado en el botón.',
                            confirmButtonText: 'Aceptar'
                        });
                        console.error('Data-caso-id no definido en el botón.');
                        return;
                    }

                    const confirmResult = await Swal.fire({
                        title: '¿Estás seguro?',
                        text: `Se preparará el correo de avalúo para el caso ID: ${casoId} y se abrirá tu cliente de correo.`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Sí, preparar correo',
                        cancelButtonText: 'Cancelar'
                    });

                    if (!confirmResult.isConfirmed) {
                        return;
                    }

                    // Mostrar spinner de carga
                    Swal.fire({
                        title: 'Preparando correo...',
                        text: 'Por favor, espera mientras se genera el contenido del email.',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Construye la URL final para la solicitud GET
        const apiUrl = `${baseUrlPrepararCorreoAvaluo}/${casoId}`;

                    console.log(apiUrl);
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'GET', // Cambiado a GET
                            headers: {
                                'Accept': 'application/json', // Esperamos una respuesta JSON
                                // 'Authorization': 'Bearer ' + tuTokenDeAcceso, // Si usas autenticación
                            },
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || `Error en el servidor: ${response.statusText || response.status}`);
                        }

                        const emailData = await response.json(); // Parsear la respuesta JSON (EmailPrepareResultDto)

                        // Abrir el cliente de correo usando el mailtoUri
                        window.location.href = emailData.mailtoUri;

                        // Mostrar SweetAlert con el cuerpo HTML y archivos para adjuntar manualmente
                        Swal.fire({
                            title: 'Correo Preparado',
                            html: `
                                <p>Tu cliente de correo se ha abierto con un borrador. Por favor, revisa el asunto y el destinatario.</p>
                                <p><strong>Asunto:</strong> ${emailData.subject}</p>
                                <p><strong>Para:</strong> ${emailData.recipientEmail}</p>
                                <p class="mt-3"><strong>Copia el siguiente contenido HTML y pégalo en el cuerpo del correo:</strong></p>
                                <textarea id="emailHtmlBody" class="form-control" rows="10" readonly>${emailData.htmlBody}</textarea>
                                <button class="btn btn-primary mt-2" onclick="copyToClipboard('emailHtmlBody')">Copiar Contenido HTML</button>
                                ${emailData.attachmentPathsNotSent && emailData.attachmentPathsNotSent.length > 0 ? `
                                    <p class="mt-3 text-warning"><strong>Archivos que debes adjuntar manualmente:</strong></p>
                                    <ul class="list-unstyled text-start">
                                        ${emailData.attachmentPathsNotSent.map(path => `<li><i class="ri-attachment-line me-1"></i>${path.split('\\').pop()}</li>`).join('')}
                                    </ul>
                                    <p class="text-muted"><small>Las aplicaciones de correo no permiten adjuntar archivos automáticamente mediante enlaces.</small></p>
                                ` : ''}
                            `,
                            width: '800px',
                            showConfirmButton: true,
                            confirmButtonText: 'Entendido',
                            didClose: () => {
                                // Opcional: Recargar la página o actualizar la UI si es necesario después de que el usuario cierra el modal
                                // location.reload();
                            }
                        });

                        console.log('Respuesta del servidor:', emailData);

                    } catch (error) {
                        console.error('Error al preparar el correo de avalúo:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Fallo al preparar correo',
                            text: error.message || 'Ocurrió un error desconocido al preparar el correo de avalúo.',
                            confirmButtonText: 'Aceptar'
                        });
                    } finally {
                        Swal.hideLoading(); // Ocultar spinner
                    }
                });
            });

            // Función auxiliar para copiar al portapapeles
            window.copyToClipboard = function(elementId) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.select();
                    element.setSelectionRange(0, 99999); // Para dispositivos móviles
                    try {
                        document.execCommand('copy');
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Contenido copiado!',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } catch (err) {
                        console.error('Fallo al copiar texto: ', err);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'No se pudo copiar automáticamente. Por favor, copia manualmente.',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                }
            };
        });

    </script>
}