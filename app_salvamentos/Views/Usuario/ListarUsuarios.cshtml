@model IEnumerable<app_salvamentos.Models.UsuarioListadoDto>
@{
    ViewData["Title"] = "Listado de Usuarios";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Asegúrate de que tu layout base esté enlazado

    // Recuperar los valores actuales de ordenamiento para mantenerlos en la UI
    var currentSortColumn = Context.Request.Query["sortColumn"].ToString();
    var currentSortDirection = Context.Request.Query["sortDirection"].ToString();
}

@section styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css">
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header border-0">
                <h4 class="card-title mb-0">
                    <i class="ri-team-line align-bottom me-1"></i> Listado de Usuarios
                </h4>
            </div><div class="card-body">
                <div class="d-flex justify-content-end mb-3">
                    <a href="@Url.Action("CrearUsuario", "Usuario", new { area = "" })" class="btn btn-success add-btn">
                        <i class="ri-add-line align-bottom me-1"></i> Crear Usuario
                    </a>
                </div>

                <div class="table-responsive">
                    <table id="alternative-pagination"
                           class="table nowrap dt-responsive align-middle table-hover table-bordered w-100" id="userTable">
                        <thead class="table-light">
                            <tr>
                                <th data-priority="1">#</th>
                                <th data-priority="2">
                                    <a href="@Url.Action("ListarUsuarios", "Usuarios", new { sortColumn = "usuario_login", sortDirection = (currentSortColumn == "usuario_login" && currentSortDirection == "ASC" ? "DESC" : "ASC") })">
                                        Login
                                        @if (currentSortColumn == "usuario_login")
                                        {
                                            <i class="ri-sort-@Html.Raw(currentSortDirection == "ASC" ? "asc" : "desc")"></i>
                                        }
                                    </a>
                                </th>
                                <th>
                                    <a href="@Url.Action("ListarUsuarios", "Usuarios", new { sortColumn = "usuario_email", sortDirection = (currentSortColumn == "usuario_email" && currentSortDirection == "ASC" ? "DESC" : "ASC") })">
                                        Nickname o Email
                                        @if (currentSortColumn == "usuario_email")
                                        {
                                            <i class="ri-sort-@Html.Raw(currentSortDirection == "ASC" ? "asc" : "desc")"></i>
                                        }
                                    </a>
                                </th>
                                <th scope="col">
                                    <a href="@Url.Action("ListarUsuarios", "Usuarios", new { sortColumn = "perfil_nombre", sortDirection = (currentSortColumn == "perfil_nombre" && currentSortDirection == "ASC" ? "DESC" : "ASC") })">
                                        Perfil
                                        @if (currentSortColumn == "perfil_nombre")
                                        {
                                            <i class="ri-sort-@Html.Raw(currentSortDirection == "ASC" ? "asc" : "desc")"></i>
                                        }
                                    </a>
                                </th>
                                <th data-priority="3">
                                    <a href="@Url.Action("ListarUsuarios", "Usuarios", new { sortColumn = "usuario_estado", sortDirection = (currentSortColumn == "usuario_estado" && currentSortDirection == "ASC" ? "DESC" : "ASC") })">
                                        Estado
                                        @if (currentSortColumn == "usuario_estado")
                                        {
                                            <i class="ri-sort-@Html.Raw(currentSortDirection == "ASC" ? "asc" : "desc")"></i>
                                        }
                                    </a>
                                </th>
                                <th scope="col">Último Login</th>
                                <th scope="col">Intentos Fallidos</th>
                                <th scope="col">Bloqueado Hasta</th>
                                <th scope="col">Acciones</th>
                            </tr>
                        </thead>
                        <tbody class="list form-check-all">
                            @if (Model != null && Model.Any())
                            {
                                @foreach (var user in Model)
                                {
                                    <tr>
                                        <th scope="row">@user.usuario_id</th>
                                        <td>@user.usuario_login</td>
                                        <td>@user.usuario_email</td>
                                        <td>@user.perfil_nombre</td>
                                        <td>
                                            @if (user.usuario_estado)
                                            {
                                                <span class="badge bg-success-subtle text-success">Activo</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger-subtle text-danger">Inactivo</span>
                                            }
                                        </td>
                                        <td>@(user.last_login_at?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                        <td>@user.failed_login_count</td>
                                        <td>@(user.lockout_until?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                        <td>
                                            <ul class="list-inline hstack gap-2 mb-0">
                                            
                                                <li class="list-inline-item" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Editar">
                                                    <a href="@Url.Action("EditarUsuario", "Usuario", new { id = user.usuario_id })" class="edit-item-btn"><i class="ri-pencil-fill align-bottom text-muted"></i></a>
                                                </li>
                                                <li class="list-inline-item" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Eliminar">
                                                    <a href="javascript:void(0);" class="remove-item-btn" data-id="@user.usuario_id"><i class="ri-delete-bin-fill align-bottom text-muted"></i></a>
                                                </li>
                                            </ul>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="9" class="text-center">No se encontraron usuarios.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
            integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.print.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>
        $(function () {
            $('#alternative-pagination').DataTable({
                responsive: {
                    details: {
                        type: 'column',
                        target: 'tr'
                    }
                },
                pagingType: 'simple_numbers',
                pageLength: 10,
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/es-ES.json'
                },
                dom: 'Bfrtip',
                buttons: [
                    { extend: 'copyHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'excelHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'pdfHtml5', className: 'btn btn-light btn-sm' },
                    { extend: 'print', className: 'btn btn-light btn-sm' }
                ],
                createdRow: function (row, data) {
                    // Assuming data[6] is where the status/state information is.
                    // You might need to adjust the index based on your actual data structure in DataTables.
                    // For the user list, it seems 'Estado' is at index 4 if we count from 0.
                    // Let's re-evaluate based on the table headers provided in the Razor view.
                    // 0: #, 1: Login, 2: Nickname o Email, 3: Perfil, 4: Estado, 5: Último Login, 6: Intentos Fallidos, 7: Bloqueado Hasta, 8: Acciones
                    // If your 'Estado' column content dynamically changes based on the user's status for styling,
                    // you would need to parse `data[4]` (which is the content of the Estado column) to apply the row class.
                    // However, the current code `data[6].includes(...)` suggests it's looking at the 7th column for status words.
                    // For the current structure of the table, `user.usuario_estado` directly determines the badge.
                    // If you want to color rows based on a different criterion (e.g., a status that might be passed in `data`),
                    // ensure the `data` array index is correct for what DataTables provides for `createdRow`.
                    // For now, I'll comment this out as it doesn't directly relate to the user state (Activo/Inactivo) which is handled by badges.
                    // if (data[6].includes('CREADO')) $(row).addClass('table-warning');
                    // else if (data[6].includes('ANÁLISIS')) $(row).addClass('table-info');
                    // else if (data[6].includes('FINALIZADO')) $(row).addClass('table-success');
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // Script para mostrar SweetAlert
            var errorMessage = '@Html.Raw(TempData["ErrorMessage"])';
            var successMessage = '@Html.Raw(TempData["SuccessMessage"])';

            if (errorMessage) {
                Swal.fire({
                    icon: 'error',
                    title: '¡Error!',
                    text: errorMessage,
                    confirmButtonText: 'Aceptar'
                });
            } else if (successMessage) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Éxito!',
                    text: successMessage,
                    confirmButtonText: 'Ok'
                });
            }

            // Lógica para el botón de eliminar (ejemplo con SweetAlert de confirmación)
            $('.remove-item-btn').on('click', function(e) {
                e.preventDefault();
                var userId = $(this).data('id');
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "¡No podrás revertir esto!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, eliminarlo!',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Aquí iría tu lógica AJAX para eliminar el usuario
                        $.ajax({
                            url: '@Url.Action("EliminarUsuario", "Usuario")', // Your delete endpoint
                            type: 'POST', // Or 'DELETE' if your API supports it and you configure it
                            data: { id: userId }, // Send the ID of the user to delete
                            success: function(response) {
                                if (response.success) {
                                    Swal.fire('¡Eliminado!', response.message, 'success')
                                        .then(() => {
                                            location.reload(); // Reload the page after successful deletion
                                        });
                                } else {
                                    Swal.fire('Error', response.message, 'error');
                                }
                            },
                            error: function(xhr, status, error) {
                                Swal.fire('Error', 'No se pudo eliminar el usuario. Inténtalo de nuevo más tarde.', 'error');
                            }
                        });
                    }
                });
            });
        });
    </script>

}